; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; RUN: opt -attributor -S < %s | FileCheck %s --check-prefixes=CHECK
;
; Test for multiple potential values
;
; potential-test 1
; bool iszero(int c) { return c == 0; }
; bool potential_test1(bool c) { return iszero(c ? 1 : -1); }

define internal i1 @iszero1(i32 %c) {
; CHECK-LABEL: @iszero1(
; CHECK-NEXT:    [[CMP:%.*]] = icmp eq i32 [[C:%.*]], 0
; CHECK-NEXT:    ret i1 [[CMP]]
;
  %cmp = icmp eq i32 %c, 0
  ret i1 %cmp
}

define i1 @potential_test1(i1 %c) {
; CHECK-LABEL: @potential_test1(
; CHECK-NEXT:    [[ARG:%.*]] = select i1 [[C:%.*]], i32 -1, i32 1
; CHECK-NEXT:    [[RET:%.*]] = tail call i1 @iszero1(i32 [[ARG]]) #0
; CHECK-NEXT:    ret i1 [[RET]]
;
  %arg = select i1 %c, i32 -1, i32 1
  %ret = tail call i1 @iszero1(i32 %arg)
  ret i1 %ret
}


; potential-test 2
;
; potential values of argument of iszero are {1,-1}
; potential value of returned value of iszero is 0
;
; int call_with_two_values(int x) { return iszero(x) + iszero(-x); }
; int potential_test2(int x) { return call_with_two_values(1) + call_with_two_values(-1); }

define internal i32 @iszero2(i32 %c) {
; CHECK-LABEL: @iszero2(
; CHECK-NEXT:    [[CMP:%.*]] = icmp eq i32 [[C:%.*]], 0
; CHECK-NEXT:    [[RET:%.*]] = zext i1 [[CMP]] to i32
; CHECK-NEXT:    ret i32 [[RET]]
;
  %cmp = icmp eq i32 %c, 0
  %ret = zext i1 %cmp to i32
  ret i32 %ret
}

define i32 @potential_test2() {
; CHECK-LABEL: @potential_test2(
; CHECK-NEXT:    [[CSRET1:%.*]] = tail call i32 @call_with_two_values(i32 1) #0, !range !0
; CHECK-NEXT:    [[CSRET2:%.*]] = tail call i32 @call_with_two_values(i32 -1) #1, !range !0
; CHECK-NEXT:    [[RET:%.*]] = add nsw i32 [[CSRET1]], [[CSRET2]]
; CHECK-NEXT:    ret i32 [[RET]]
;
  %csret1 = tail call i32 @call_with_two_values(i32 1)
  %csret2 = tail call i32 @call_with_two_values(i32 -1)
  %ret = add nsw i32 %csret1, %csret2
  ret i32 %ret
}

define internal i32 @call_with_two_values(i32 %c) {
; CHECK-LABEL: @call_with_two_values(
; CHECK-NEXT:    [[CSRET1:%.*]] = tail call i32 @iszero2(i32 [[C:%.*]]) #0, !range !1
; CHECK-NEXT:    [[MINUSC:%.*]] = sub nsw i32 0, [[C]]
; CHECK-NEXT:    [[CSRET2:%.*]] = tail call i32 @iszero2(i32 [[MINUSC]]) #0, !range !1
; CHECK-NEXT:    [[RET:%.*]] = add nsw i32 [[CSRET1]], [[CSRET2]]
; CHECK-NEXT:    ret i32 [[RET]]
;
  %csret1 = tail call i32 @iszero2(i32 %c)
  %minusc = sub nsw i32 0, %c
  %csret2 = tail call i32 @iszero2(i32 %minusc)
  %ret = add nsw i32 %csret1, %csret2
  ret i32 %ret
}


; potential-test 3
;
; potential values of returned value of f are {0,1}
; potential values of argument of g are {0,1}
; potential value of returned value of g is 1
; then returned value of g can be simplified
;
; int zero_or_one(int c) { return c < 2; }
; int potential_test3() { return zero_or_one(iszero(0))+zero_or_one(iszero(1)); }

define internal i32 @iszero3(i32 %c) {
; CHECK-LABEL: @iszero3(
; CHECK-NEXT:    [[CMP:%.*]] = icmp eq i32 [[C:%.*]], 0
; CHECK-NEXT:    [[RET:%.*]] = zext i1 [[CMP]] to i32
; CHECK-NEXT:    ret i32 [[RET]]
;
  %cmp = icmp eq i32 %c, 0
  %ret = zext i1 %cmp to i32
  ret i32 %ret
}

define i32 @potential_test3() {
; CHECK-LABEL: @potential_test3(
; CHECK-NEXT:    [[CMP1:%.*]] = tail call i32 @iszero3(i32 0) #0
; CHECK-NEXT:    [[TRUE1:%.*]] = tail call i32 @zero_or_one(i32 [[CMP1]]) #0
; CHECK-NEXT:    [[CMP2:%.*]] = tail call i32 @iszero3(i32 1) #0
; CHECK-NEXT:    [[TRUE2:%.*]] = tail call i32 @zero_or_one(i32 [[CMP2]]) #0
; CHECK-NEXT:    [[RET:%.*]] = add nsw i32 [[TRUE1]], [[TRUE2]]
; CHECK-NEXT:    ret i32 [[RET]]
;
  %cmp1 = tail call i32 @iszero3(i32 0)
  %true1 = tail call i32 @zero_or_one(i32 %cmp1)
  %cmp2 = tail call i32 @iszero3(i32 1)
  %true2 = tail call i32 @zero_or_one(i32 %cmp2)
  %ret = add nsw i32 %true1, %true2
  ret i32 %ret
}

define internal i32 @zero_or_one(i32 %c) {
; CHECK-LABEL: @zero_or_one(
; CHECK-NEXT:    [[CMP:%.*]] = icmp slt i32 [[C:%.*]], 2
; CHECK-NEXT:    [[RET:%.*]] = zext i1 [[CMP]] to i32
; CHECK-NEXT:    ret i32 [[RET]]
;
  %cmp = icmp slt i32 %c, 2
  %ret = zext i1 %cmp to i32
  ret i32 %ret
}


; potential-test 4,5
;
; simplified
; int potential_test4(int c) { return return1or3(c) == 2; }
; int potential_test5(int c) { return return1or3(c) == return2or4(c); }
;
; not simplified
; int potential_test6(int c) { return return1or3(c) == 3; }
; int potential_test7(int c) { return return1or3(c) == return3or4(c); }

define i32 @potential_test4(i32 %c) {
; CHECK-LABEL: @potential_test4(
; CHECK-NEXT:    [[CSRET:%.*]] = tail call i32 @return1or3(i32 [[C:%.*]]) #0, !range !2
; CHECK-NEXT:    [[FALSE:%.*]] = icmp eq i32 [[CSRET]], 2
; CHECK-NEXT:    [[RET:%.*]] = zext i1 [[FALSE]] to i32
; CHECK-NEXT:    ret i32 [[RET]]
;
  %csret = tail call i32 @return1or3(i32 %c)
  %false = icmp eq i32 %csret, 2
  %ret = zext i1 %false to i32
  ret i32 %ret
}

define i32 @potential_test5(i32 %c) {
; CHECK-LABEL: @potential_test5(
; CHECK-NEXT:    [[CSRET1:%.*]] = tail call i32 @return1or3(i32 [[C:%.*]]) #0, !range !2
; CHECK-NEXT:    [[CSRET2:%.*]] = tail call i32 @return2or4(i32 [[C]]) #0, !range !3
; CHECK-NEXT:    [[FALSE:%.*]] = icmp eq i32 [[CSRET1]], [[CSRET2]]
; CHECK-NEXT:    [[RET:%.*]] = zext i1 [[FALSE]] to i32
; CHECK-NEXT:    ret i32 [[RET]]
;
  %csret1 = tail call i32 @return1or3(i32 %c)
  %csret2 = tail call i32 @return2or4(i32 %c)
  %false = icmp eq i32 %csret1, %csret2
  %ret = zext i1 %false to i32
  ret i32 %ret
}

define i1 @potential_test6(i32 %c) {
; CHECK-LABEL: @potential_test6(
; CHECK-NEXT:    [[CSRET1:%.*]] = tail call i32 @return1or3(i32 [[C:%.*]]) #0, !range !2
; CHECK-NEXT:    [[RET:%.*]] = icmp eq i32 [[CSRET1]], 3
; CHECK-NEXT:    ret i1 [[RET]]
;
  %csret1 = tail call i32 @return1or3(i32 %c)
  %ret = icmp eq i32 %csret1, 3
  ret i1 %ret
}

define i1 @potential_test7(i32 %c) {
; CHECK-LABEL: @potential_test7(
; CHECK-NEXT:    [[CSRET1:%.*]] = tail call i32 @return1or3(i32 [[C:%.*]]) #0, !range !2
; CHECK-NEXT:    [[CSRET2:%.*]] = tail call i32 @return3or4(i32 [[C]]) #0, !range !4
; CHECK-NEXT:    [[RET:%.*]] = icmp eq i32 [[CSRET1]], [[CSRET2]]
; CHECK-NEXT:    ret i1 [[RET]]
;
  %csret1 = tail call i32 @return1or3(i32 %c)
  %csret2 = tail call i32 @return3or4(i32 %c)
  %ret = icmp eq i32 %csret1, %csret2
  ret i1 %ret
}

define internal i32 @return1or3(i32 %c) {
; CHECK-LABEL: @return1or3(
; CHECK-NEXT:    [[CMP:%.*]] = icmp eq i32 [[C:%.*]], 0
; CHECK-NEXT:    [[RET:%.*]] = select i1 [[CMP]], i32 1, i32 3
; CHECK-NEXT:    ret i32 [[RET]]
;
  %cmp = icmp eq i32 %c, 0
  %ret = select i1 %cmp, i32 1, i32 3
  ret i32 %ret
}

define internal i32 @return2or4(i32 %c) {
; CHECK-LABEL: @return2or4(
; CHECK-NEXT:    [[CMP:%.*]] = icmp eq i32 [[C:%.*]], 0
; CHECK-NEXT:    [[RET:%.*]] = select i1 [[CMP]], i32 2, i32 4
; CHECK-NEXT:    ret i32 [[RET]]
;
  %cmp = icmp eq i32 %c, 0
  %ret = select i1 %cmp, i32 2, i32 4
  ret i32 %ret
}

define internal i32 @return3or4(i32 %c) {
; CHECK-LABEL: @return3or4(
; CHECK-NEXT:    [[CMP:%.*]] = icmp eq i32 [[C:%.*]], 0
; CHECK-NEXT:    [[RET:%.*]] = select i1 [[CMP]], i32 3, i32 4
; CHECK-NEXT:    ret i32 [[RET]]
;
  %cmp = icmp eq i32 %c, 0
  %ret = select i1 %cmp, i32 3, i32 4
  ret i32 %ret
}

